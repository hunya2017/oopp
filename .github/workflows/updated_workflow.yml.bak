name: immortalwrt-all

on:
  watch:
    types: [ started ]
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: false
        type: boolean
      CACHE_BUILD:
        description: '缓存加速'
        required: true
        default: true
        type: boolean
      UPLOAD_FIRMWARE:
        description: '是否上传固件'
        required: true
        default: true
        type: boolean
      UPLOAD_BUILDINFO:
        description: '是否上传配置文件'
        required: true
        default: true
        type: boolean

    steps:
    - name: 安装源和修改默认设置
          run: |
            cd openwrt
            ./scripts/feeds install -a
            echo "=== 开始修改默认设置文件 ==="
            # 查找default-settings目录
            DEFAULT_SETTINGS_PATH=""
            if [ -d "package/emortal/default-settings" ]; then
              DEFAULT_SETTINGS_PATH="package/emortal/default-settings"
            elif [ -d "package/lean/default-settings" ]; then
              DEFAULT_SETTINGS_PATH="package/lean/default-settings"
            else
              echo "查找所有可能的default-settings目录:"
              find package/ -name "*default*" -type d
              DEFAULT_SETTINGS_PATH=$(find package/ -name "*default*" -type d | head -1)
            fi
            if [ -z "$DEFAULT_SETTINGS_PATH" ]; then
              echo "错误: 未找到default-settings目录"
              exit 1
            fi
            echo "使用目录: $DEFAULT_SETTINGS_PATH"
            cd $DEFAULT_SETTINGS_PATH
            # 检查是否存在99-default-settings文件
            if [ -f "files/99-default-settings" ]; then
              echo "✓ 找到99-default-settings文件"
              # 备份原文件
              cp files/99-default-settings files/99-default-settings.bak
              echo "✓ 已备份原文件"
              # 方法1: 使用patch方式修改（如果存在patch文件）
              if [ -e "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ]; then
                echo "尝试使用patch方式修改..."
                cp "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ./settings.patch
                if patch --dry-run -p1 < settings.patch >/dev/null 2>&1; then
                  patch -p1 < settings.patch
                  echo "✓ patch方式修改成功"
                else
                  echo "⚠ patch方式失败，使用sed方式修改"
                  # 恢复备份文件
                  cp files/99-default-settings.bak files/99-default-settings
                fi
              fi
              # 方法2: 使用sed直接在exit 0之前插入内容
              if ! grep -q "ImmortalWrt-Custom" files/99-default-settings; then
                echo "使用sed方式添加自定义设置..."
                # 创建临时的自定义设置内容
                cat > /tmp/custom_settings << 'EOF'
    # === 自定义设置开始 ===
    echo "应用自定义默认设置..."
    # 系统设置
    uci set system.@system[0].hostname='ImmortalWrt-Custom'
    uci set system.@system[0].timezone='CST-8'
    uci set system.@system[0].zonename='Asia/Shanghai'
    # 网络设置
    uci set network.lan.ipaddr='192.168.10.1'
    uci set network.lan.netmask='255.255.255.0'
    # DHCP设置
    uci set dhcp.lan.start='100'
    uci set dhcp.lan.limit='150'
    uci set dhcp.lan.leasetime='12h'
    # 删除IPv6设置
    uci delete network.lan.ip6assign 2>/dev/null
    uci delete network.wan6 2>/dev/null
    uci delete dhcp.lan.dhcpv6 2>/dev/null
    uci delete dhcp.lan.ra 2>/dev/null
    # 设置默认密码
    echo 'root:password' | chpasswd
    # NTP服务器设置
    uci delete system.ntp.server 2>/dev/null
    uci add_list system.ntp.server='ntp.aliyun.com'
    uci add_list system.ntp.server='time.pool.aliyun.com'
    uci add_list system.ntp.server='cn.pool.ntp.org'
    # 无线设置（如果存在）
          find package/ -name "*default*" -type d
          DEFAULT_SETTINGS_PATH=$(find package/ -name "*default*" -type d | head -1)
        uci set wireless.$wifi_device.disabled='0'
        uci set wireless.$wifi_device.country='CN'
        uci set wireless.$wifi_device.channel='auto'
        wifi_iface=$(uci show wireless 2>/dev/null | grep "wireless\.default_" | cut -d'.' -f2 | cut -d'=' -f1 | head -1)
        if [ -n "$wifi_iface" ]; then
            uci set wireless.$wifi_iface.ssid='ImmortalWrt-WiFi'
            uci set wireless.$wifi_iface.key='12345678'
            uci set wireless.$wifi_iface.encryption='psk2'
            uci set wireless.$wifi_iface.disabled='0'
        fi
    fi
    echo "自定义设置应用完成"
    # === 自定义设置结束 ===
    EOF
                # 在exit 0之前插入自定义内容
                if grep -q "exit 0" files/99-default-settings; then
                  sed -i '/exit 0/i\# === 插入自定义设置 ===' files/99-default-settings
                  sed -i '/# === 插入自定义设置 ===/r /tmp/custom_settings' files/99-default-settings
                  sed -i '/# === 插入自定义设置 ===/d' files/99-default-settings
                  echo "✓ 使用sed方式修改成功"
                else
                  cat /tmp/custom_settings >> files/99-default-settings
                  echo "exit 0" >> files/99-default-settings
                  echo "✓ 在文件末尾添加自定义设置"
                fi
                rm -f /tmp/custom_settings
              else
                echo "ℹ 文件已包含自定义设置，跳过修改"
              fi
              chmod +x files/99-default-settings
            else
              echo "⚠ 未找到99-default-settings文件，列出files目录内容:"
              ls -la files/ 2>/dev/null || echo "files目录不存在"
            fi
            echo "=== 修改完成，显示最终文件内容 ==="
            if [ -f "files/99-default-settings" ]; then
              echo "文件内容:"
              cat files/99-default-settings
            fi
        fi
        
        if [ -z "$DEFAULT_SETTINGS_PATH" ]; then
          echo "错误: 未找到default-settings目录"
          exit 1
        fi
        
        echo "使用目录: $DEFAULT_SETTINGS_PATH"
        cd $DEFAULT_SETTINGS_PATH
        
        # 检查是否存在99-default-settings文件
        if [ -f "files/99-default-settings" ]; then
          echo "✓ 找到99-default-settings文件"
          
          # 备份原文件
          cp files/99-default-settings files/99-default-settings.bak
          echo "✓ 已备份原文件"
          
          # 方法1: 使用patch方式修改（如果存在patch文件）
          if [ -e "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ]; then
            echo "尝试使用patch方式修改..."
            cp "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ./settings.patch
            
            if patch --dry-run -p1 < settings.patch >/dev/null 2>&1; then
              patch -p1 < settings.patch
              echo "✓ patch方式修改成功"
            else
              echo "⚠ patch方式失败，使用sed方式修改"
              # 恢复备份文件
              cp files/99-default-settings.bak files/99-default-settings
            fi
          fi
          
          # 方法2: 使用sed直接在exit 0之前插入内容
          if ! grep -q "ImmortalWrt-Custom" files/99-default-settings; then
            echo "使用sed方式添加自定义设置..."
            
            # 创建临时的自定义设置内容
            cat > /tmp/custom_settings << 'EOF'

# === 自定义设置开始 ===
echo "应用自定义默认设置..."

# 系统设置
uci set system.@system[0].hostname='ImmortalWrt-Custom'
uci set system.@system[0].timezone='CST-8'
uci set system.@system[0].zonename='Asia/Shanghai'

# 网络设置
uci set network.lan.ipaddr='192.168.10.1'
uci set network.lan.netmask='255.255.255.0'

# DHCP设置
uci set dhcp.lan.start='100'
uci set dhcp.lan.limit='150'
uci set dhcp.lan.leasetime='12h'

# 删除IPv6设置
uci delete network.lan.ip6assign 2>/dev/null
uci delete network.wan6 2>/dev/null
uci delete dhcp.lan.dhcpv6 2>/dev/null
uci delete dhcp.lan.ra 2>/dev/null

# 设置默认密码
echo 'root:password' | chpasswd

# NTP服务器设置
uci delete system.ntp.server 2>/dev/null
uci add_list system.ntp.server='ntp.aliyun.com'
uci add_list system.ntp.server='time.pool.aliyun.com'
uci add_list system.ntp.server='cn.pool.ntp.org'

# 无线设置（如果存在）
wifi_device=$(uci show wireless 2>/dev/null | grep "wireless\.radio" | cut -d'.' -f2 | cut -d'=' -f1 | head -1)
if [ -n "$wifi_device" ]; then
    uci set wireless.$wifi_device.disabled='0'
    uci set wireless.$wifi_device.country='CN'
    uci set wireless.$wifi_device.channel='auto'
    
    wifi_iface=$(uci show wireless 2>/dev/null | grep "wireless\.default_" | cut -d'.' -f2 | cut -d'=' -f1 | head -1)
    if [ -n "$wifi_iface" ]; then
        uci set wireless.$wifi_iface.ssid='ImmortalWrt-WiFi'
        uci set wireless.$wifi_iface.key='12345678'
        uci set wireless.$wifi_iface.encryption='psk2'
        uci set wireless.$wifi_iface.disabled='0'
    fi
fi

echo "自定义设置应用完成"
# === 自定义设置结束 ===

EOF
            
            # 在exit 0之前插入自定义内容
            if grep -q "exit 0" files/99-default-settings; then
              # 找到exit 0的行号，在其前面插入内容
              sed -i '/exit 0/i\
          if ! grep -q "ImmortalWrt-Custom" files/99-default-settings; then
            echo "使用sed方式添加自定义设置..."
            # 创建临时的自定义设置内容
            cat > /tmp/custom_settings << 'EOF'
# === 自定义设置开始 ===
echo "应用自定义默认设置..."
# 系统设置
uci set system.@system[0].hostname='ImmortalWrt-Custom'
uci set system.@system[0].timezone='CST-8'
uci set system.@system[0].zonename='Asia/Shanghai'
# 网络设置
uci set network.lan.ipaddr='192.168.10.1'
uci set network.lan.netmask='255.255.255.0'
# DHCP设置
uci set dhcp.lan.start='100'
uci set dhcp.lan.limit='150'
uci set dhcp.lan.leasetime='12h'
# 删除IPv6设置
uci delete network.lan.ip6assign 2>/dev/null
uci delete network.wan6 2>/dev/null
uci delete dhcp.lan.dhcpv6 2>/dev/null
uci delete dhcp.lan.ra 2>/dev/null
# 设置默认密码
echo 'root:password' | chpasswd
# NTP服务器设置
uci delete system.ntp.server 2>/dev/null
uci add_list system.ntp.server='ntp.aliyun.com'
uci add_list system.ntp.server='time.pool.aliyun.com'
uci add_list system.ntp.server='cn.pool.ntp.org'
# 无线设置（如果存在）
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # 后续的上传和发布步骤保持不变...
    - name: 整理固件文件
      id: artifact
      if: steps.compile.outputs.status == 'success' && !cancelled()
echo "自定义设置应用完成"
# === 自定义设置结束 ===
EOF
            # 在exit 0之前插入自定义内容
            if grep -q "exit 0" files/99-default-settings; then
              sed -i '/exit 0/i\# === 插入自定义设置 ===' files/99-default-settings
              sed -i '/# === 插入自定义设置 ===/r /tmp/custom_settings' files/99-default-settings
              sed -i '/# === 插入自定义设置 ===/d' files/99-default-settings
              echo "✓ 使用sed方式修改成功"
            else
              cat /tmp/custom_settings >> files/99-default-settings
              echo "exit 0" >> files/99-default-settings
              echo "✓ 在文件末尾添加自定义设置"
            fi
            rm -f /tmp/custom_settings
          else
            echo "ℹ 文件已包含自定义设置，跳过修改"
          fi
          chmod +x files/99-default-settings
        else
          echo "⚠ 未找到99-default-settings文件，列出files目录内容:"
          ls -la files/ 2>/dev/null || echo "files目录不存在"
        fi
        echo "=== 修改完成，显示最终文件内容 ==="
        if [ -f "files/99-default-settings" ]; then
          echo "文件内容:"
          cat files/99-default-settings
        fi
      run: |
        cd openwrt
        mkdir -p ./artifact/firmware ./artifact/package ./artifact/buildinfo

        find ./bin/targets/ -type d -name "packages" -exec rm -rf {} +
        find ./bin/targets/ -type f -exec cp -t ./artifact/firmware/ {} +
        find ./bin/packages/ -type f -name "*.ipk" -exec cp -t ./artifact/package/ {} +
        find ./bin/targets/ -type f \( -name "*.buildinfo" -o -name "*.manifest" \) -exec cp -t ./artifact/buildinfo/ {} +

        cp -f ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
        cp -f ./.config ./artifact/firmware/${{ env.Firmware_Name }}.info
        cp -f ./feeds.conf.default ./artifact/buildinfo/

        cd artifact/firmware/
        rename "s/openwrt/${{ env.Firmware_Name }}/" * || true

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d.%H.%M")-${{ env.Firmware_Name }}" >> $GITHUB_OUTPUT
        echo "release_date=$(date +"%Y.%m.%d.%H.%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "
        ⏰ 编译时间：${{ env.FILE_TIME1 }}
        
        🎈 固件版本：ImmortalWrt Custom Build
        
        🖥 管理地址：192.168.10.1 
        
        🌴 用户名：root
        
        🛠 密码：password
        
        📝 自定义功能：
        - 中文界面
        - 自定义IP地址(192.168.10.1)
        - 优化时区设置
        - 预设WiFi配置
        - DHCP范围: 192.168.10.100-250
        " >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
      with:
        name: ${{ steps.tag.outputs.release_date }} ${{ env.Firmware_Name }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: openwrt/artifact/firmware/*
