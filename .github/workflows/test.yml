name: immortalwrt-r3s

on:
  watch:
    types: [ started ]
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: false
        type: boolean
      CACHE_BUILD:
        description: '缓存加速'
        required: true
        default: true
        type: boolean
      UPLOAD_FIRMWARE:
        description: '是否上传固件'
        required: true
        default: true
        type: boolean
      UPLOAD_BUILDINFO:
        description: '是否上传配置文件'
        required: true
        default: true
        type: boolean
      UPLOAD_PACKAGE:
        description: '是否上传插件'
        required: true
        default: true
        type: boolean
      UPLOAD_RELEASE:
        description: '是否发布到 Releases'
        required: true
        default: true
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/immortalwrt.info
  Firmware_Name: immortalwrt-all
  DIY_P1_SH: smpackage/immortalwrt-all-1.sh
  DIY_P2_SH: smpackage/immortalwrt-all-2.sh
  SETTINGS_PATCH: smpackage/settings.patch
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_RELEASE: true
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: immortalwrt-all
    runs-on: Ubuntu-22.04
    permissions:
      contents: write # 用于创建release
      packages: read # 用于读取包
      id-token: write # 用于身份验证
      actions: write # 用于管理工作流
      deployments: write # 用于部署
      issues: write # 用于创建issue
      discussions: write # 用于创建讨论

    steps:
    - name: 释放磁盘空间
      uses: endersonmenezes/free-disk-space@v2
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
        remove_packages_one_command: true
        remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
        testing: false

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

    - name: 准备完成
      uses: actions/checkout@v4

    - name: 下载源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        cd openwrt
        if [ -n "$REPO_TAG" ]; then
          git fetch --tags
          git checkout $REPO_TAG
        else
          git checkout $REPO_BRANCH
        fi
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存
      uses: klever1988/cachewrtbuild@main
      if: github.event.inputs.CACHE_BUILD == 'true'
      with:
        ccache: 'true'
        mixkey: '${{ env.Firmware_Name }}'
        prefix: ${{ github.workspace }}/openwrt

    - name: 执行自定义脚本1
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装源和修改默认设置
      run: |
        cd openwrt
        ./scripts/feeds install -a

        echo "=== 开始修改默认设置文件 ==="

        # 查找default-settings目录
        DEFAULT_SETTINGS_PATH=""
        if [ -d "package/emortal/default-settings" ]; then
          DEFAULT_SETTINGS_PATH="package/emortal/default-settings"
        elif [ -d "package/lean/default-settings" ]; then
          DEFAULT_SETTINGS_PATH="package/lean/default-settings"
        else
          echo "查找所有可能的default-settings目录:"
          find package/ -name "*default*" -type d
          DEFAULT_SETTINGS_PATH=$(find package/ -name "*default*" -type d | head -1)
        fi

        if [ -z "$DEFAULT_SETTINGS_PATH" ]; then
          echo "错误: 未找到default-settings目录"
          exit 1
        fi

        echo "使用目录: $DEFAULT_SETTINGS_PATH"
        cd $DEFAULT_SETTINGS_PATH

        # 检查是否存在99-default-settings文件
        if [ -f "files/99-default-settings" ]; then
          echo "✓ 找到99-default-settings文件"
          
          # 备份原文件
          cp files/99-default-settings files/99-default-settings.bak
          echo "✓ 已备份原文件"
          
          # 方法1: 使用patch方式修改（如果存在patch文件）
          if [ -e "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ]; then
            echo "尝试使用patch方式修改..."
            cp "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ./settings.patch
            
            if patch --dry-run -p1 < settings.patch >/dev/null 2>&1; then
              patch -p1 < settings.patch
              echo "✓ patch方式修改成功"
            else
              echo "⚠ patch方式失败，使用sed方式修改"
              # 恢复备份文件
              cp files/99-default-settings.bak files/99-default-settings
            fi
          fi
          
          # 方法2: 使用sed直接在exit 0之前插入内容
          if ! grep -q "ImmortalWrt-Custom" files/99-default-settings; then
            echo "使用sed方式添加自定义设置..."
            
            # 创建临时的自定义设置内容
            if [ -f "$GITHUB_WORKSPACE/$SETTINGS_PATCH" ]; then
              echo "使用 $SETTINGS_PATCH 文件进行修改"
              cat "$GITHUB_WORKSPACE/$SETTINGS_PATCH" > /tmp/custom_settings
            else
              echo "$SETTINGS_PATCH 不存在，配置失败"
              exit 1
            fi
            
            # 在exit 0之前插入自定义内容
            if grep -q "exit 0" files/99-default-settings; then
              # 找到exit 0的行号，在其前面插入内容
              sed -i '/exit 0/i\
              # === 插入自定义设置 ===' files/99-default-settings
              
              # 在标记行后插入实际内容
              sed -i '/# === 插入自定义设置 ===/r /tmp/custom_settings' files/99-default-settings
              
              # 删除标记行
              sed -i '/# === 插入自定义设置 ===/d' files/99-default-settings
              
              echo "✓ 使用sed方式修改成功"
            else
              # 如果没有exit 0，直接在文件末尾添加
              cat /tmp/custom_settings >> files/99-default-settings
              echo "exit 0" >> files/99-default-settings
              echo "✓ 在文件末尾添加自定义设置"
            fi
            
            # 清理临时文件
            rm -f /tmp/custom_settings
          else
            echo "ℹ 文件已包含自定义设置，跳过修改"
          fi
          
          # 确保文件有执行权限
          chmod +x files/99-default-settings
          
        else
          echo "⚠ 未找到99-default-settings文件，列出files目录内容:"
          ls -la files/ 2>/dev/null || echo "files目录不存在"
        fi

        echo "=== 修改完成，显示最终文件内容 ==="
        if [ -f "files/99-default-settings" ]; then
          echo "文件内容:"
          cat files/99-default-settings
        fi

    - name: 执行自定义脚本2
      run: |
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH连接到Actions
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      uses: P3TERX/ssh2actions@v1.0.0

    - name: 输出编译信息
      run: |
        cd openwrt
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT $PWD
        echo
        echo "=========================================="

        # 显示自定义设置文件状态
        echo "检查自定义设置文件:"
        DEFAULT_SETTINGS_PATH=$(find package/ -name "*default*" -type d | head -1)
        if [ -n "$DEFAULT_SETTINGS_PATH" ] && [ -f "$DEFAULT_SETTINGS_PATH/files/99-default-settings" ]; then
          echo "✓ 99-default-settings文件存在"
          if grep -q "ImmortalWrt-Custom" "$DEFAULT_SETTINGS_PATH/files/99-default-settings"; then
            echo "✓ 包含自定义设置"
          else
            echo "⚠ 未检测到自定义设置"
          fi
        fi

        echo "=========================================="

        # 显示已选插件列表
        grep -i CONFIG_PACKAGE_luci-app .config | grep -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in

        echo "已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}

    - name: 下载固件包
      id: package
      if: (!cancelled())
      run: |
        cd openwrt
        make defconfig
        make download -j$(($(nproc)+1))
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo "CPU线程数: $(nproc)"
        echo "可用内存: $(free -h)"
        echo "开始时间: $(date "+%Y-%m-%d %H:%M:%S")"

        echo "=== 开始编译 ==="
        make defconfig
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s        echo "======================="
        echo "编译完成时间: $(date "+%Y-%m-%d %H:%M:%S")"
        echo "磁盘使用情况:"
        df -h

        echo "bin目录内容:"
        ls -la bin/

        if [ -d bin/packages ]; then
          echo "软件包目录内容:"
          ls -la bin/packages/
        else
          echo "警告: 没有生成软件包目录"
        fi

        if [ -d bin/targets ]; then
          echo "目标文件目录内容:"
          ls -la bin/targets/
        else
          echo "错误: 没有生成固件目录"
          exit 1
        fi

        echo "status=success" >> $GITHUB_OUTPUT

        # 获取设备名称
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: SSH连接到Actions调试编译
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    # 后续的上传和发布步骤保持不变...
    - name: 保存配置文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        echo "保存.config文件到代码库..."
        if [ -f .config ]; then
          cp -f .config $GITHUB_WORKSPACE/$CONFIG_FILE
          cd $GITHUB_WORKSPACE
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add $CONFIG_FILE
          git commit -m "bot: 更新编译配置 $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "✓ 配置文件已更新并提交"
        else
          echo "⚠ .config文件不存在"
        fi

    - name: 整理固件文件
      id: artifact
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        mkdir -p ./artifact/firmware ./artifact/package ./artifact/buildinfo

        # 确保目标目录存在
        [ -d ./bin/targets ] || { echo "警告: bin/targets 目录不存在"; exit 1; }

        echo "=== 开始整理固件文件 ==="

        # 复制完成后再清理不需要的目录
        if [ -d ./bin/targets ]; then
          echo "清理 targets/packages 目录..."
          find ./bin/targets/ -type d -name "packages" -exec rm -rf {} + || true
        fi

        # 首先复制所有文件
        if [ -d ./bin/targets ]; then
          echo "复制固件文件..."
          find ./bin/targets/ -type f -exec cp -t ./artifact/firmware/ {} + || true
        fi



        # 复制IPK文件（如果存在）
        if [ -d ./bin/packages ]; then
          echo "复制IPK包文件..."
          find ./bin/packages/ -type f -name "*.ipk" -exec cp -t ./artifact/package/ {} + || true
        else
          echo "提示: bin/packages 目录不存在，跳过复制IPK文件"
        fi

        # 复制buildinfo文件
        if [ -d ./bin/targets ]; then
          echo "复制buildinfo文件..."
          find ./bin/targets/ -type f \( -name "*.buildinfo" -o -name "*.manifest" \) -exec cp -t ./artifact/buildinfo/ {} + || true
        fi

        # 复制配置文件
        echo "复制配置文件..."
        [ -f ./.config ] && cp -f ./.config "./artifact/buildinfo/${{ env.Firmware_Name }}.info" || echo "警告: .config 文件不存在"
        [ -f ./.config ] && cp -f ./.config "./artifact/firmware/${{ env.Firmware_Name }}.info" || echo "警告: .config 文件不存在"
        [ -f ./feeds.conf.default ] && cp -f ./feeds.conf.default ./artifact/buildinfo/ || echo "警告: feeds.conf.default 不存在"

        # 重命名固件文件
        if [ -d ./artifact/firmware ]; then
          echo "重命名固件文件..."
          pushd ./artifact/firmware/
          rename "s/openwrt/${{ env.Firmware_Name }}/" * || true
          popd
        else
          echo "错误: artifact/firmware 目录不存在"
          exit 1
        fi

        echo "=== 固件文件整理完成 ==="

        # 显示整理后的文件列表
        echo "固件目录内容:"
        ls -l ./artifact/firmware/
        echo "配置目录内容:"
        ls -l ./artifact/buildinfo/
        if [ -d ./artifact/package ]; then
          echo "软件包目录内容:"
          ls -l ./artifact/package/
        fi

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d.%H.%M")-${{ env.Firmware_Name }}" >> $GITHUB_OUTPUT
        echo "release_date=$(date +"%Y.%m.%d.%H.%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "
        ⏰ 编译时间：$(date "+%Y年%m月%d日-%H点%M分")

        🎈 固件版本：ImmortalWrt Custom Build


        🖥 管理地址：192.168.10.1\ 


        🌴 用户名：root


        🛠 密码：password


        \udce6 文件说明：

        - firmware/: 固件文件目录

        - ipk_packages.tar.gz: IPK软件包合集


        📝 自定义功能：

        - 中文界面

        - 自定义IP地址(192.168.10.1)

        - 优化时区设置

        - 预设WiFi配置

        - DHCP范围: 192.168.10.100-250

        \" >> release.txt

        echo \"status=success\" >> $GITHUB_OUTPUT\n"

    - name: 打包IPK文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/artifact/package
        echo "创建IPK压缩包..."
        [ -d ./ ] && tar -czf ../ipk_packages.tar.gz ./ || echo "警告: package目录为空"
        cd ..
        echo "IPK打包完成"

    - name: 自动发布到Releases
      uses: softprops/action-gh-release@v2
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        name: ${{ steps.tag.outputs.release_date }} ${{ env.Firmware_Name }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          openwrt/artifact/firmware/*
          openwrt/artifact/ipk_packages.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
