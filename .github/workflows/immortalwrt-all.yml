#
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
# chmod +x /etc/init.d/netspeedtest

name: immortalwrt-all

on:
  # schedule:
  # - cron: '0 22 * * *'
  # release:
  #   types: [ published ]

  watch:
    types: [ started ]

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: false
        type: boolean

      CACHE_BUILD:
        description: '缓存加速'
        required: true
        default: true
        type: boolean

      UPLOAD_FIRMWARE:
        description: '是否上传固件'
        required: true
        default: true
        type: boolean

      UPLOAD_BUILDINFO:
        description: '是否上传配置文件'
        required: true
        default: true
        type: boolean

      UPLOAD_PACKAGE:
        description: '是否上传插件'
        required: true
        default: true
        type: boolean

      UPLOAD_RELEASE:
        description: '是否发布到 Releases'
        required: true
        default: true
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10

  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/immortalwrt.info
  Firmware_Name: immortalwrt-all
  DIY_P1_SH: smpackage/immortalwrt-all-1.sh
  DIY_P2_SH: smpackage/immortalwrt-all-2.sh
  PATCH_MAKEFILE: smpackage/patch1.patch
  CUSTOM_SETTINGS: smpackage/99-my-default-settings
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_RELEASE: true
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: immortalwrt-all
    runs-on: Ubuntu-22.04

    steps:
    - name: 释放磁盘空间
      uses: endersonmenezes/free-disk-space@v2
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
        remove_packages_one_command: true
        remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
        testing: false

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "编译开始时间..."
        START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

    - name: 准备完成
      uses: actions/checkout@v4

    - name: 下载源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        cd openwrt
        if [ -n "$REPO_TAG" ]; then
          git fetch --tags
          git checkout $REPO_TAG
        else
          git checkout $REPO_BRANCH
        fi
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存
      uses: klever1988/cachewrtbuild@main
      if: github.event.inputs.CACHE_BUILD == 'true'
      with:
        ccache: 'true'
        mixkey: '${{ env.Firmware_Name }}'
        prefix: ${{ github.workspace }}/openwrt

    - name: 执行自定义脚本1
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装源和应用补丁
      run: |
        cd openwrt
        ./scripts/feeds install -a

        echo "=== 开始应用自定义补丁和设置 ==="

        # 检查default-settings目录是否存在
        if [ ! -d "package/emortal/default-settings" ]; then
          echo "错误: default-settings目录不存在，查找可能的路径..."
          find package/ -name "*default*" -type d
          # 尝试其他可能的路径
          if [ -d "package/base-files" ]; then
            echo "使用base-files作为替代方案"
            DEFAULT_SETTINGS_PATH="package/base-files"
          else
            echo "未找到合适的默认设置目录"
            exit 1
          fi
        else
          DEFAULT_SETTINGS_PATH="package/emortal/default-settings"
        fi

        cd $DEFAULT_SETTINGS_PATH
        echo "当前目录: $(pwd)"
        echo "目录内容:"
        ls -la

        # 应用Makefile补丁（如果存在且适用）
        if [ -e "$GITHUB_WORKSPACE/$PATCH_MAKEFILE" ] && [ -f "Makefile" ]; then
          echo "准备应用Makefile补丁: $PATCH_MAKEFILE"
          cp "$GITHUB_WORKSPACE/$PATCH_MAKEFILE" ./patch1.patch
          
          echo "补丁内容预览:"
          head -20 patch1.patch
          
          # 尝试应用补丁
          if patch --dry-run -p1 < patch1.patch >/dev/null 2>&1; then
            echo "✓ 补丁检查通过，开始应用"
            patch -p1 < patch1.patch
            echo "✓ Makefile补丁应用成功"
          else
            echo "⚠ 补丁无法直接应用，尝试其他方式"
            echo "补丁应用失败，继续使用原始配置"
          fi
        fi

        # 处理自定义设置文件
        if [ -e "$GITHUB_WORKSPACE/$CUSTOM_SETTINGS" ]; then
          echo "添加自定义设置文件: $CUSTOM_SETTINGS"
          
          # 确保files目录存在
          mkdir -p files
          
          # 复制自定义设置文件
          cp "$GITHUB_WORKSPACE/$CUSTOM_SETTINGS" files/99-my-default-settings
          chmod +x files/99-my-default-settings
          
          echo "✓ 自定义设置文件已添加"
          echo "文件内容预览:"
          head -15 files/99-my-default-settings
          
          # 如果没有成功应用Makefile补丁，则直接替换默认设置文件
          if [ -f "files/99-default-settings" ]; then
            echo "备份并替换原始默认设置文件"
            cp files/99-default-settings files/99-default-settings.bak
            cp files/99-my-default-settings files/99-default-settings
            echo "✓ 已替换原始默认设置文件"
          fi
        else
          echo "ℹ 未找到自定义设置文件: $CUSTOM_SETTINGS"
        fi

        echo "=== 最终文件状态 ==="
        echo "files目录内容:"
        ls -la files/ || echo "files目录不存在"

        if [ -f "files/99-my-default-settings" ]; then
          echo "✓ 自定义设置文件存在"
        fi

        if [ -f "files/99-default-settings" ]; then
          echo "✓ 默认设置文件存在"
          echo "默认设置文件内容预览:"
          head -10 files/99-default-settings
        fi

    - name: 执行自定义脚本2
      run: |
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH连接到Actions
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      uses: P3TERX/ssh2actions@v1.0.0

    - name: 输出编译信息
      run: |
        cd openwrt
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        echo

        # 显示已选插件列表
        grep -i CONFIG_PACKAGE_luci-app .config | grep -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in

        echo "已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="

    - name: 下载固件包
      id: package
      if: (!cancelled())
      run: |
        cd openwrt
        make defconfig
        make download -j$(($(nproc)+1))
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 将生成的.config文件复制到config文件夹
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        mkdir -p config
        cp openwrt/.config config/immortalwrt.info

    - name: 提交.config文件到源码库
      if: steps.compile.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        if ! git diff --quiet -- config/immortalwrt.info; then
          git add config/immortalwrt.info
          git commit -m "更新.config文件"
          git pull origin ${{ github.ref }}
          for i in {1..3}; do
            git push origin ${{ github.ref }} && break || echo "重试推送更改 ($i/3)..."
            sleep 5
          done
        else
          echo ".config文件没有更改，无需提交。"
        fi

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 整理固件文件
      id: artifact
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        mkdir -p ./artifact/firmware ./artifact/package ./artifact/buildinfo

        find ./bin/targets/ -type d -name "packages" -exec rm -rf {} +
        find ./bin/targets/ -type f -exec cp -t ./artifact/firmware/ {} +
        find ./bin/packages/ -type f -name "*.ipk" -exec cp -t ./artifact/package/ {} +
        find ./bin/targets/ -type f \( -name "*.buildinfo" -o -name "*.manifest" \) -exec cp -t ./artifact/buildinfo/ {} +

        cp -f ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
        cp -f ./.config ./artifact/firmware/${{ env.Firmware_Name }}.info
        cp -f ./feeds.conf.default ./artifact/buildinfo/

        cd artifact/firmware/
        rename "s/openwrt/${{ env.Firmware_Name }}/" * || true

    - name: 上传固件
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_FIRMWARE == 'true' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/artifact/firmware/
        if-no-files-found: error
        retention-days: 30
        compression-level: 6
        overwrite: true

    - name: 上传配置文件
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_BUILDINFO == 'true' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_buildinfo${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/artifact/buildinfo/
        if-no-files-found: warn
        retention-days: 30
        compression-level: 6
        overwrite: true

    - name: 上传插件
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_PACKAGE == 'true' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_package${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/artifact/package/
        if-no-files-found: warn
        retention-days: 30
        compression-level: 6
        overwrite: true

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d.%H.%M")-${{ env.Firmware_Name }}" >> $GITHUB_OUTPUT
        echo "release_date=$(date +"%Y.%m.%d.%H.%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "
        ⏰ 编译时间：${{ env.FILE_TIME1 }}

        🎈 固件版本：ImmortalWrt Custom

        🖥 管理地址：192.168.10.1 

        🌴 用户名：root

        🛠 密码：password

        📝 自定义功能：
        - 中文界面
        - 自定义IP地址
        - 优化时区设置
        - 预设WiFi配置
        " >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
      with:
        name: ${{ steps.tag.outputs.release_date }} ${{ env.Firmware_Name }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: openwrt/artifact/firmware/*

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.3.3
      continue-on-error: true
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 60
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
